// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract LoanContract is ReentrancyGuard {
    address private admin;
    bytes32 private encryptionKey;

    mapping(address => uint256) private collateral;

    constructor(bytes32 _encryptionKey) {
        admin = msg.sender;
        encryptionKey = _encryptionKey;
    }

    function addCollateral(uint256 amount) external nonReentrant {
        require(amount > 0, "Amount must be greater than zero");
        collateral[msg.sender] += amount;
        bytes32 encryptedAmount = keccak256(abi.encodePacked(amount, encryptionKey));
        // Store encrypted amount (implementation detail)
    }
}
